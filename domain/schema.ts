// # Windy Civi Type System
//
// This file defines the core type system for Windy Civi's event-sourced, graph-oriented feeds.
// The system is built around several key concepts:
//
// - **Nodes**: Base entities in our graph system
// - **Relations**: Connections between nodes
// - **Feeds**: A configuration for a list of Lists that gives users the ability to make many feeds
// - **Lists**: Immutable lists generated by Feeds
// - **Items**: The actual content, currently focused on legislation
//
// ## Core Graph Types

import { CiviLegislationData } from "./legislation";

// ### Base Node Interface
// The foundational type for all entities in our graph system.
export interface Node {
  id: string;
  created_at: string;
}

// ### Base Relation Interface
// Defines connections between nodes in our graph.
export interface Relation {
  id: string;
}

// ## Feed System
//
// ### Feed Types
// Feeds are the primary way users interact with content. They're dynamic
// collections that can be filtered and combined.

type FeedKey = string;

type Sorter = "UpdatedScore" | Prompt;

type FeedConfig = {
  sources: FeedKey[];
  matchers: {
    some?: Prompt[];
    all?: Prompt[];
  };
  sorters: Sorter[];
};

export interface Feed {
  key: FeedKey;
  config: FeedConfig;
  lists: ListKey[];
}

// ### List
// Lists represent immutable collections of items, providing a stable
// reference point for feed content.

// ListIDs always start with a timestamp to ensure they're unique.
type ListKey = string;

export interface List extends Node {
  key: ListKey;
  feedKey: FeedKey;
  config: FeedConfig; // immutable duplicate to see what it ran
  items: ListItem[]; // immutable duplicate of sorted results
}

export interface ListItem extends Relation {
  id: ItemID;
  tags: {
    [key: Prompt]: Ranking;
  };
}

type Ranking = true | false;

// ### Feed Relations
// Defines how items are related and scored within feeds.
export type FeedItemRelation = {
  id: string;
  score: {
    [key: Prompt]: Ranking;
  };
  relation: Relation;
};

type Prompt = string;

// ## Content Types
//
// ### Item Interface
// The core content type, currently specialized for legislation.

type ItemID = string;

export interface Item extends Node {
  id: ItemID;
  type: "WindyCiviLegislation";
  data: CiviLegislationData;
}

// ## User System
//
// ### User Types
// Defines user entities and their relationships with feeds.

type UserID = string;

export interface User extends Node {
  id: UserID;
  channels: {
    native: boolean;
  };
  subscriptions: {
    feeds: FeedKey[];
    items: ItemID[];
  }[];
}

// States
export enum NavStates {
  ROUTE = "ROUTE",
}

// Transitions
export enum NavTransitions {
  NAVIGATE = "NAVIGATE",
}

export interface NavStateMachine {
  states: NavStates;
  transitions: {
    [NavTransitions.NAVIGATE]: {
      to: NavStates.ROUTE;
    };
  };
}
